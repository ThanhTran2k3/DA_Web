@model DA_Web.Models.BaiHat
@inject Web_Context _context;
@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
    List<BaiHat> baiHat = _context.BaiHat.ToList();
    BaiHat targetBaiHat = await _context.BaiHat.FindAsync(Model.Id);
    BienStatic.Index = baiHat.IndexOf(targetBaiHat);
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet">
<style>
    .scroll-content {
        max-height: 300px;
        overflow-y: auto;
        padding: 10px;
        border: 1px solid #ccc;
        
    }

    .item {
        padding: 5px;
    }

    .is-active {
        background-color: #FF6388;
        color: white;
        transition: 0.3s ease;
    }

    .is-over {
        color: gray;
    }



    .dropdown-menu,
    .dropdown-submenu {
        display: none;
    }


    .dropdown-button:focus + .dropdown-menu,
    .dropdown-button:hover + .dropdown-menu {
        display: block;
       
    }


    .dropdown-item:hover > .dropdown-submenu {
        display: block;

    }


    .dropdown-submenu, .dropdown-menu {
        position: absolute;
        left: 100%;
        top: 50%;
        border: 1px solid #ccc;
        background-color: white;
    }

    .dropdown-submenu{
        padding: 0
    }
    a {
        color: black; 
        text-decoration: none; 
    }
    a:hover {
        color: black; 
        text-decoration: none; 
    }
</style>


<div class="d-flex bg-transparent">
    <div style="display:block;width: 40%">
            <img src="@Model.imageFile" style="width: 400px; height: 350px "/>
        <div class="d-flex justify-content-around">
        <div class="d-inline">
            <h4>@Model.Name</h4>
                <p class="fs-3 fw-medium">
                    Ca sĩ:
                    @{
                    List<BaiHat_NgheSi> baiHat_NgheSi = _context.BaiHat_NgheSi.Where(p => p.BaiHatID == Model.Id).ToList();
                }
                @foreach (BaiHat_NgheSi item1 in baiHat_NgheSi)
                {
                    NgheSi ngheSi = _context.NgheSi.Find(item1.NgheSiID);
                    <a asp-area="Admin" asp-controller="NgheSis" asp-action="Details" asp-route-id="@ngheSi.Id">@ngheSi.Name</a>
                    if (baiHat_NgheSi.Count() != 1)
                    {
                        var lastItem = baiHat_NgheSi[baiHat_NgheSi.Count - 1];
                        if (item1.NgheSiID != lastItem.NgheSiID)
                        {
                            <a>, </a>
                        }
                    }
                }
            </p>
        </div>

            <div class="dropdown-container" style="padding-top: 10px">
                <button class="btn btn-dark " type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                    ⋮
                </button>
                <ul class="dropdown-menu">
                    <li class="dropdown-item"> <a asp-area="Admin" asp-action="DanhGia" asp-route-idBH="@Model.Id">Đánh giá</a></li>
                    <li class="dropdown-item">
                        <a href="#">Thêm vào Album</a>
                        <ul class="dropdown-submenu">
                            <li class="dropdown-item"><a asp-area="Admin" asp-controller="DanhSachPhats" asp-action="Create">Tạo mới</a></li>
                            @foreach (DanhSachPhat item in ViewBag.listDanhSach)
                            {
                                <li class="dropdown-item">
                                    <a asp-area="Admin" asp-controller="DanhSachPhats" asp-action="AddPlaylist" asp-route-DSid="@item.ID" asp-route-BHid="@Model.Id">@Html.DisplayFor(modelItem => item.Name)</a>
                                </li>
                            }
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div style=" width: 60%; justify-content: center; align-items: center;">
        <ul class="scroll-content" id="lyricsList" style="max-height: 570px">
            @if (ViewBag.LRCData != null)
            {
                var lines = ViewBag.LRCData.ToString().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None);
                foreach (var line in lines)
                {
                    var timeMatch = System.Text.RegularExpressions.Regex.Match(line, @"\[(\d{2}):(\d{2})(\.\d{2})?\]");
                    if (timeMatch.Success)
                    {
                        var minutes = int.Parse(timeMatch.Groups[1].Value);
                        var seconds = int.Parse(timeMatch.Groups[2].Value);
                        var fractionalSeconds = timeMatch.Groups[3].Success ? double.Parse(timeMatch.Groups[3].Value) : 0.0;
                        var startTime = minutes * 60 + seconds + fractionalSeconds;
                        var lyrics = line.Replace(timeMatch.Value, "").Trim();
                        <li class="item" data-start-time="@startTime" style="text-align:center">@lyrics</li>
                    }
                }
            }
        </ul>
    </div>
</div>



<script> 
    document.addEventListener('DOMContentLoaded', function () {
        const audioPlayer = document.getElementById('audio');
        const lyricsList = document.getElementById('lyricsList');
        const lyricsItems = lyricsList.querySelectorAll('.item');
        function highlightCurrentLyric(currentTime) {
            for (let i = 0; i < lyricsItems.length; i++) {
                const item = lyricsItems[i];
                const startTime = parseFloat(item.dataset.startTime);
                const endTime = i + 1 < lyricsItems.length ? parseFloat(lyricsItems[i + 1].dataset.startTime) : Infinity;
                if (currentTime >= startTime && currentTime < endTime) {
                    lyricsItems.forEach(li => li.classList.remove('is-active'));
                    item.classList.add('is-active');
                    item.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center'
                    });

                    break;
                }
            }
        }
        audioPlayer.addEventListener('timeupdate', function () {
            const currentTime = audioPlayer.currentTime;
            highlightCurrentLyric(currentTime);
        });

        audioPlayer.addEventListener('seeked', clearActiveLyric);
        function clearActiveLyric() {
            lyricsItems.forEach(li => li.classList.remove('is-active'));
        }
    });


</script>

